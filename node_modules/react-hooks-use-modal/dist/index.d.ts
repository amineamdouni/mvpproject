import { Options as FocusTrapOptions } from 'focus-trap';
import React from 'react';
export interface WrapperProps {
    children: React.ReactNode;
}
export interface OverlayProps {
}
export interface ModalProps<T extends Record<string, unknown>> {
    title?: React.ReactNode;
    description?: React.ReactNode;
    close: () => void;
    children: React.ReactNode;
    additionalProps?: T;
}
export interface UseModalOptions<T extends Record<string, unknown>> {
    initialValue?: boolean;
    preventScroll?: boolean;
    focusTrapOptions?: FocusTrapOptions;
    components?: {
        Wrapper?: React.ComponentType<WrapperProps>;
        Overlay?: React.ComponentType<OverlayProps>;
        Modal?: React.ComponentType<ModalProps<T>>;
    };
}
export interface ModalWrapperProps<T extends Record<string, unknown>> {
    title?: React.ReactNode;
    description?: React.ReactNode;
    children: React.ReactNode;
    additionalProps?: T;
}
export declare type UseModalResult<T extends Record<string, unknown>> = [
    ModalWrapper: React.FC<ModalWrapperProps<T>>,
    open: () => void,
    close: () => void,
    isOpen: boolean
];
export declare type UseModal<T extends Record<string, unknown>> = (elementId?: string, options?: UseModalOptions<T>) => UseModalResult<T>;
export declare const useModal: <T extends Record<string, unknown>>(elementId?: string, options?: UseModalOptions<T> | undefined) => UseModalResult<T>;
export { ModalProvider } from './components/ModalProvider';
